using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MYSTORE.M_EntityFramework;
using MYSTORE.UI_FORM;
using System.Data.Entity;
using System.Text.RegularExpressions;

namespace MYSTORE.UI_FORM
{
    public partial class frm_Suppoler : Form
    {
        #region init 
        #region claredata
        public void claredata()
        {
            txtname.Text = "";
            txtcomp.Text = "";
            txtaddress.Text = "";
            txtphone.Text = "";
            txtmail.Text = "";
            txtaccount.Text = "";
        }
        #endregion
        Manege_StoreEntities4 db = new Manege_StoreEntities4();
        Suppoler mysuppoler = new Suppoler();
        public int id;
        public frm_Suppoler()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            MYSTORE.M_EntityFramework.Manege_StoreEntities4 dbContext = new MYSTORE.M_EntityFramework.Manege_StoreEntities4();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.Suppolers.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                grid_supp.DataSource = dbContext.Suppolers.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void label5_Click(object sender, EventArgs e)
        {

        }

        private void bunifuMaterialTextbox3_OnValueChanged(object sender, EventArgs e)
        {

        }


        #region colaps
        private void btn_colaps_Click(object sender, EventArgs e)
        {


            if (pnl_c_top.Height == 275)
            {
                pnl_c_top.Height = 20;
                btn_colaps.Location = new Point(0, 0);
            }
            else
            {
                pnl_c_top.Height = 275;
                btn_colaps.Location = new Point(0, 255);
            }
        }
        #endregion


        #endregion

        #region add 
        private void btnadd_Click(object sender, EventArgs e)
        {
            if (txtname.Text == "" || txtcomp.Text == "" || txtaddress.Text == "" || txtphone.Text == "" || txtmail.Text == "" || txtaccount.Text == "")
            {
                MessageBox.Show(" ! الرجاء إدخال جميع البيانات", "Missing Data", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                pnl_c_top.Height = 275;
                btn_colaps.Location = new Point(0, 250);
                txtname.Focus();
            }
            else
            {
                if (db.Suppolers.Any(x => x.Name == txtname.Text && x.CompanyName == txtcomp.Text))
                {
                    var res = MessageBox.Show("هذا المورد موجود مسبقاً", "Warring", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    grid_supp.DataSource = db.Suppolers.Where(y => y.Name == txtname.Text).ToList();
                }
                else
                {
                    Regex reg = new Regex(@"^(\d+)|(\d+\.\d+)$");
                    Regex reg1 = new Regex(@"^\+?\d+$");
                    if ((!reg.IsMatch(txtaccount.Text)) || (!reg1.IsMatch(txtphone.Text)))
                    {
                        MessageBox.Show(" ! الرجاء إدخال أرقام فقط");
                    }
                    else
                    {
                        try
                        {
                            frm_Notivecation note = new frm_Notivecation();
                            mysuppoler.Name = txtname.Text;
                            mysuppoler.CompanyName = txtcomp.Text;
                            mysuppoler.Address = txtaddress.Text;
                            mysuppoler.Phone = txtphone.Text;
                            mysuppoler.Mail = txtmail.Text;
                            mysuppoler.Account = double.Parse(txtaccount.Text);
                            db.Suppolers.Add(mysuppoler);
                            db.SaveChanges();
                            claredata();
                            txtname.Focus();
                            grid_supp.DataSource = db.Suppolers.ToList();
                            note.lab_message.Text = "تمت إضافة المورد بنجاح";
                            note.Show();
                        }
                        catch (Exception)
                        {

                            throw;
                        }
                    }
                }
            }
        }

        #endregion

        #region update 
        private void btnupdate_Click(object sender, EventArgs e)
        {
            if (txtname.Text == "" || txtcomp.Text == "" || txtaddress.Text == "" || txtphone.Text == "" || txtmail.Text == "" || txtaccount.Text == "")
            {
                MessageBox.Show("! الرجاء إختيار البيانات لتعديلها", "Missing Data", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            }
            else
            {
                Regex reg = new Regex(@"^(\d+)|(\d+\.\d+)$");
                Regex reg1 = new Regex(@"^\+?\d+$");
                if ((!reg.IsMatch(txtaccount.Text)) || (!reg1.IsMatch(txtphone.Text)))
                {
                    MessageBox.Show(" ! الرجاء إدخال أرقام فقط");
                }
                else
                {
                    try
                    {
                        frm_Notivecation note = new frm_Notivecation();
                        mysuppoler.Name = txtname.Text;
                        mysuppoler.CompanyName = txtcomp.Text;
                        mysuppoler.Address = txtaddress.Text;
                        mysuppoler.Phone = txtphone.Text;
                        mysuppoler.Mail = txtmail.Text;
                        mysuppoler.Account = double.Parse(txtaccount.Text);
                        db.Entry(mysuppoler).State = EntityState.Modified;
                        db.SaveChanges();
                        claredata();
                        txtname.Focus();
                        grid_supp.DataSource = db.Suppolers.ToList();
                        note.lab_message.Text = "تم تعديل بيانات المورد بنجاح";
                        note.Show();
                    }
                    catch (Exception ex)
                    {

                        MessageBox.Show(ex.Message);
                    }
                }

            }
        }

        private void grid_supp_DoubleClick(object sender, EventArgs e)
        {
            id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("Supp_ID"));
            mysuppoler = db.Suppolers.Where(x => x.Supp_ID == id).FirstOrDefault();
            txtname.Text = mysuppoler.Name;
            txtcomp.Text = mysuppoler.CompanyName;
            txtaddress.Text = mysuppoler.Address;
            txtphone.Text = mysuppoler.Phone;
            txtmail.Text = mysuppoler.Mail;
            txtaccount.Text = mysuppoler.Account.ToString();

            if (pnl_c_top.Height == 20)
            {
                pnl_c_top.Height = 275;
                btn_colaps.Location = new Point(0, 250);
            }
        }

        #endregion



        #region delete 
        private void btndelete_Click(object sender, EventArgs e)
        {
            try
            {
                id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("Supp_ID"));
                var res = MessageBox.Show("! هل أنت متأكد", "Delete", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (res == DialogResult.Yes)
                {
                    mysuppoler = db.Suppolers.Where(x => x.Supp_ID == id).FirstOrDefault();
                    db.Entry(mysuppoler).State = EntityState.Deleted;
                    db.SaveChanges();
                    grid_supp.DataSource = db.Suppolers.ToList();
                    claredata();
                    frm_Notivecation note = new frm_Notivecation();
                    note.lab_message.Text = "تم حذف بيانات المورد";
                    note.Show();
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        #endregion

        #region refresh 
        private void btnrefresh_Click(object sender, EventArgs e)
        {
            grid_supp.DataSource = db.Suppolers.ToList();
        }
        #endregion

        #region Key controles
       
        private void txtname_KeyDown_1(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                case Keys.Up:
                    txtaddress.Focus();

                    break;
                case Keys.Left:
                    txtphone.Focus();
                    break;

                case Keys.Right:
                    txtphone.Focus();
                    break;
                case Keys.Down:
                    txtcomp.Focus();
                    break;
                default:
                    break;

            }
        }

        private void txtcomp_KeyDown_1(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                case Keys.Up:
                    txtname.Focus();

                    break;
                case Keys.Left:
                    txtmail.Focus();
                    break;
                case Keys.Right:
                    txtmail.Focus();
                    break;
                case Keys.Down:
                    txtaddress.Focus();
                    break;
                default:
                    break;

            }
        }

        private void txtaddress_KeyDown_1(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                case Keys.Up:
                    txtcomp.Focus();

                    break;
                case Keys.Left:
                    txtaccount.Focus();
                    break;
                case Keys.Right:
                    txtaccount.Focus();
                    break;
                case Keys.Down:
                    txtname.Focus();
                    break;
                default:
                    break;

            }
        }

        private void txtphone_KeyDown_1(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                case Keys.Up:
                    txtaccount.Focus();

                    break;

                case Keys.Left:
                    txtname.Focus();
                    break;
                case Keys.Right:
                    txtname.Focus();
                    break;
                case Keys.Down:
                    txtmail.Focus();
                    break;
                default:
                    break;

            }
        }

        private void txtmail_KeyDown_1(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                case Keys.Up:
                    txtphone.Focus();

                    break;

                case Keys.Left:
                    txtcomp.Focus();
                    break;
                case Keys.Right:
                    txtcomp.Focus();
                    break;
                case Keys.Down:
                    txtaccount.Focus();
                    break;
                default:
                    break;

            }
        }

        private void txtaccount_KeyDown_1(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                case Keys.Up:
                    txtmail.Focus();

                    break;

                case Keys.Left:
                    txtaddress.Focus();
                    break;
                case Keys.Right:
                    txtaddress.Focus();
                    break;
                case Keys.Down:
                    txtphone.Focus();
                    break;
                default:
                    break;

            }
        }
        #region nothing
        private void txtname_KeyDown(object sender, KeyEventArgs e)
        { }
        private void txtcomp_KeyDown(object sender, KeyEventArgs e)
        {

        }
        private void txtaddress_KeyDown(object sender, KeyEventArgs e)
        {

        }
        private void txtphone_KeyDown(object sender, KeyEventArgs e)
        {

        }
        private void txtmail_KeyDown(object sender, KeyEventArgs e)
        {

        }
        private void txtaccount_KeyDown(object sender, KeyEventArgs e)
        {

        }
        #endregion

        #endregion


        #region print
        private void btnprint_Click(object sender, EventArgs e)
        {
            gridView1.ShowPrintPreview();
        }
        #endregion

        private void txtcomp_OnValueChanged(object sender, EventArgs e)
        {

        }
    }
}
