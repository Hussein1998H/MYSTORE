using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using MYSTORE.M_EntityFramework;
using MYSTORE.UI_FORM;
using System.IO;
using System.Text.RegularExpressions;

namespace MYSTORE.UI_FORM
{
    public partial class frm_Product : Form
    {
        #region init 
        Manege_StoreEntities4 db = new Manege_StoreEntities4();
        Product myproduct = new Product();
        public int id;
        #region claredata
        public void claredata()
        {
            txtname.Text = "";
            txtcat.Text = "";
            txtnetprice.Text = "";
            txtsaleprice.Text = "";
            txtquantity.Text = "";
            // pic_prod.Image = new PictureBox().Image;
        }
        #endregion
        public frm_Product()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            MYSTORE.M_EntityFramework.Manege_StoreEntities4 dbContext = new MYSTORE.M_EntityFramework.Manege_StoreEntities4();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.Products.LoadAsync().ContinueWith(loadTask =>
            {
    // Bind data to control when loading complete
    grid_prod.DataSource = dbContext.Products.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }
        #region colaps
        private void btn_colaps_Click(object sender, EventArgs e)
        {
            if (pnl_c_top.Height == 275)
            {
                pnl_c_top.Height = 20;
                btn_colaps.Location = new Point(0, 0);
            }
            else
            {
                pnl_c_top.Height = 275;
                btn_colaps.Location = new Point(0, 255);
            }
        }
        #endregion
        #endregion

        #region add product

        private void btn_addPhoto_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog();
            if (ofd.ShowDialog() == DialogResult.OK)
            {
                pic_prod.Image = Image.FromFile(ofd.FileName);
            }
        }
        private void simpleButton1_Click(object sender, EventArgs e)
        {
            if (txtname.Text == "" || txtcat.Text == "" || txtnetprice.Text == "" || txtsaleprice.Text == "" || txtquantity.Text == "")
            {
                MessageBox.Show("رجاءاً أدخل جميع البيانات ", "Missing Data", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                pnl_c_top.Height = 275;
                btn_colaps.Location = new Point(0, 250);
                txtname.Focus();
            }
            else
            {
                Regex reg = new Regex(@"^(\d+)|(\d+\.\d+)$");
                Regex reg1 = new Regex(@"^\d+$");
                if ((!reg.IsMatch(txtnetprice.Text ) &&!reg.IsMatch(txtsaleprice.Text)) ||(!reg1.IsMatch(txtquantity.Text)))
                {
                    MessageBox.Show("الرجاء إدخال أرقام فقط ");
                }
                else
                {
                    try
                    {

                        frm_Notivecation note = new frm_Notivecation();
                        MemoryStream ms = new MemoryStream();
                        pic_prod.Image.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
                        string name = txtname.Text;
                        string category = txtcat.Text;
                        float quantity = float.Parse(txtquantity.Text);
                        float netprice = float.Parse(txtnetprice.Text);
                        float saleprice = float.Parse(txtsaleprice.Text);

                        db.safeadd(name, category, quantity, netprice, saleprice, dateprod.Value, ms.ToArray()); //stroe proc
                        db.SaveChanges();
                        claredata();

                        txtname.Focus();
                        grid_prod.DataSource = db.Products.ToList();
                        note.lab_message.Text = "تمت إضافة المنتج بنجاح";
                        note.Show();
                        pic_prod.Image = Properties.Resources.images;


                    }
                    catch (Exception ex)
                    {

                        MessageBox.Show(ex.Message);
                    }
                }
            }
        }
        #endregion

        #region update product 
        private void btnupdate_Click(object sender, EventArgs e)
        {
            if (txtname.Text == "" || txtcat.Text == "" || txtnetprice.Text == "" || txtsaleprice.Text == "" || txtquantity.Text == "")
            {
                MessageBox.Show("الرجاء إختيار البيانات لتعديلها", "Missing Data", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            }
            else
            {
                Regex reg = new Regex(@"^(\d+)|(\d+\.\d+)$");
                Regex reg1 = new Regex(@"^\d+$");
                if ((!reg.IsMatch(txtnetprice.Text) && !reg.IsMatch(txtsaleprice.Text)) || (!reg1.IsMatch(txtquantity.Text)))
                {
                    MessageBox.Show(" !الرجاء إدخال أرقام فقط  ");
                }
                else
                {
                    try
                    {

                        frm_Notivecation note = new frm_Notivecation();
                        MemoryStream ms = new MemoryStream();
                        pic_prod.Image.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);

                        string name = txtname.Text;
                        string category = txtcat.Text;
                        double quantity = double.Parse(txtquantity.Text);
                        float netprice = float.Parse(txtnetprice.Text);
                        float saleprice = float.Parse(txtsaleprice.Text);
                        myproduct.Name = name;
                        myproduct.Category = category;
                        myproduct.Quantity = quantity;
                        myproduct.Net_Price = netprice;
                        myproduct.Sale_price = saleprice;
                        myproduct.Date = dateprod.Value;
                        myproduct.image = ms.ToArray();
                        db.Entry(myproduct).State = EntityState.Modified;
                        db.SaveChanges();
                        claredata();
                        txtname.Focus();
                        grid_prod.DataSource = db.Products.ToList();
                        note.lab_message.Text = "تم تعديل المنتج بنجاح";
                        note.Show();


                    }
                    catch (Exception ex)
                    {

                        MessageBox.Show(ex.Message);
                    }
                }
            }
        }

        private void grid_prod_DoubleClick(object sender, EventArgs e)
        {
            int id = Convert.ToInt32(tileView1.GetFocusedRowCellValue("Prod_ID"));
            myproduct = db.Products.Where(x => x.Prod_ID == id).FirstOrDefault();
            txtname.Text = myproduct.Name;
            txtcat.Text = myproduct.Category;
            txtnetprice.Text = myproduct.Net_Price.ToString();
            txtsaleprice.Text = myproduct.Sale_price.ToString();
            txtquantity.Text = myproduct.Quantity.ToString();
            pic_prod.Image = new PictureBox().Image;
            MemoryStream ms = new MemoryStream(myproduct.image);
            pic_prod.Image = Image.FromStream(ms);
            dateprod.Value = myproduct.Date.Value;
            //id = myproduct.Prod_ID;
            if (pnl_c_top.Height == 20)
            {
                pnl_c_top.Height = 275;
                btn_colaps.Location = new Point(0, 250);
            }
        }
        #endregion



        #region delete Product 
        private void btndelete_Click(object sender, EventArgs e)
        {
            try
            {
                id = Convert.ToInt32(tileView1.GetFocusedRowCellValue("Prod_ID"));
                var res = MessageBox.Show("هل أنت متأكد", "Delete", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (res == DialogResult.Yes)
                {

                    myproduct = db.Products.Where(x => x.Prod_ID == id).FirstOrDefault();
                    db.Entry(myproduct).State = EntityState.Deleted;
                    db.SaveChanges();
                    grid_prod.DataSource = db.Products.ToList();
                    claredata();

                    frm_Notivecation note = new frm_Notivecation();
                    note.lab_message.Text = "تم حذف المنتج";
                    note.Show();

                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        #endregion

        #region refresh 
        private void btnrefresh_Click(object sender, EventArgs e)
        {
            grid_prod.DataSource = db.Products.ToList();
        }
        #endregion

        #region searsh
        private void txtSearsh_TextChanged(object sender, EventArgs e)
        {
            var _searsh = txtSearsh.Text;
            grid_prod.DataSource = db.Products.Where(x => x.Name.Contains(_searsh)).ToList();
        }
        private void btnsearsh_Click(object sender, EventArgs e)
        {
           
           
        }
        #endregion

        #region Key controles
        private void txtname_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                case Keys.Down:
                    txtcat.Focus();

                    break;
                case Keys.Right:
                    txtnetprice.Focus();
                    break;
                case Keys.Left:
                    txtnetprice.Focus();
                    break;
                default:
                    break;
            }
        }

        private void txtcat_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                case Keys.Up:
                    txtname.Focus();

                    break;
                case Keys.Right:
                    txtsaleprice.Focus();
                    break;
                case Keys.Left:
                    txtsaleprice.Focus();
                    break;

                default:
                    break;
            }
        }

        private void txtnetprice_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                case Keys.Up:
                    txtquantity.Focus();
                    break;
                case Keys.Left:
                    txtname.Focus();
                    break;
                case Keys.Right:
                    txtname.Focus();
                    break;
                case Keys.Down:
                    txtsaleprice.Focus();
                    break;
               
                default:
                    break;
            }
        }

        private void txtsaleprice_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                case Keys.Up:
                    txtnetprice.Focus();

                    break;
                case Keys.Down:
                    txtquantity.Focus();
                    break;
                case Keys.Left:
                    txtcat.Focus();
                    break;
                case Keys.Right:
                    txtcat.Focus();
                    break;

                default:
                    break;
            }
        }

        private void txtquantity_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.KeyData)
            {
                case Keys.Up:
                    txtsaleprice.Focus();

                    break;

                case Keys.Left:
                    txtcat.Focus();
                    break;
                case Keys.Right:
                    txtcat.Focus();
                    break;
                case Keys.Down:
                    txtnetprice.Focus();
                    break;
                default:
                    break;

            }
        }
        #endregion

        private void btnprint_Click(object sender, EventArgs e)
        {
            tileView1.ShowPrintPreview();
        }

        private void pnl_prod_Paint(object sender, PaintEventArgs e)
        {

        }
    }
}
